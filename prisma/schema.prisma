// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - for authentication and user profiles
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  password      String
  bio           String?
  avatar        String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  posts         Post[]
  comments      Comment[]
}

enum Role {
  USER
  AUTHOR
  ADMIN
}

// Post model - for blog posts
model Post {
  id            String    @id @default(cuid())
  slug          String    @unique
  title         String
  excerpt       String
  content       String
  published     Boolean   @default(false)
  featuredImage String?
  readTime      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  author        User      @relation(fields: [authorId], references: [id])
  authorId      String
  category      Category? @relation(fields: [categoryId], references: [id])
  categoryId    String?
  tags          TagsOnPosts[]
  comments      Comment[]
  relatedPosts  RelatedPost[] @relation("PostToRelatedPost")
  relatedTo     RelatedPost[] @relation("RelatedToPost")
}

// Category model - for post categories
model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Tag model - for post tags
model Tag {
  id        String        @id @default(cuid())
  name      String        @unique
  slug      String        @unique
  posts     TagsOnPosts[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

// Many-to-many relationship between posts and tags
model TagsOnPosts {
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  tag       Tag      @relation(fields: [tagId], references: [id])
  tagId     String
  createdAt DateTime @default(now())

  @@id([postId, tagId])
}

// Comment model - for post comments
model Comment {
  id        String   @id @default(cuid())
  content   String
  likes     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

// RelatedPost model - for linking related posts
model RelatedPost {
  post      Post     @relation("PostToRelatedPost", fields: [postId], references: [id])
  postId    String
  relatedTo Post     @relation("RelatedToPost", fields: [relatedToId], references: [id])
  relatedToId String
  createdAt DateTime @default(now())

  @@id([postId, relatedToId])
}
